<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>

   <groupId>gov.fda.nctr</groupId>
   <artifactId>arlims</artifactId>
   <version>0.2.0-SNAPSHOT</version>
   <packaging>jar</packaging>

   <name>arlims</name>
   <description>ALIS</description>

   <parent>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-parent</artifactId>
      <version>2.1.4.RELEASE</version>
      <relativePath/> <!-- lookup parent from repository -->
   </parent>

   <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
      <java.release>11</java.release> <!-- to override: mvn -Djava.release=8 ... -->
      <nodejs.version>v10.15.3</nodejs.version>
      <!-- prod.context.name:
       Provides the final jar or war file name, and the context name (initial component of the resource
       part of the app's url) under which the client produced here will expect application services and
       static resources to be available. The client is always configured via this param to use this prefix
       both in index.html as base href, and when making application api urls.

       On the other hand when running an embedded Tomcat container, for example via "mvn spring-boot:run"
       or via "java -jar", the context is instead determined by the application property
       "server.servlet.contextpath" which can be set in an application properties file. The client however
       is still configured to use this prod.context.name parameter as described above, so the
       server.servlet.contextpath property should be set to match the value of this maven property
       in this case.
       -->
      <prod.context.name>alis</prod.context.name>
      <filtering.output.message>THIS FILE WAS PRODUCED FROM A TEMPLATE, DO NOT EDIT.</filtering.output.message>
   </properties>

   <dependencies>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-web</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-json</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-data-jpa</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-security</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-tomcat</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-test</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-devtools</artifactId>
         <optional>true</optional>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-configuration-processor</artifactId>
         <optional>true</optional>
      </dependency>
      <dependency>
         <groupId>javax.inject</groupId>
         <artifactId>javax.inject</artifactId>
         <version>1</version>
      </dependency>
      <dependency>
      	<groupId>org.hobsoft.spring</groupId>
      	<artifactId>spring-rest-template-logger</artifactId>
      	<version>2.0.0</version>
      </dependency>
      <dependency>
          <groupId>com.auth0</groupId>
          <artifactId>java-jwt</artifactId>
          <version>3.8.0</version>
      </dependency>
      <dependency>
          <groupId>org.apache.httpcomponents</groupId>
          <artifactId>httpclient</artifactId>
          <version>4.5.8</version>
      </dependency>
      <dependency>
        <groupId>org.apache.pdfbox</groupId>
        <artifactId>pdfbox</artifactId>
        <version>2.0.24</version>
      </dependency>
      <dependency>
          <groupId>org.postgresql</groupId>
          <artifactId>postgresql</artifactId>
          <version>42.2.5</version>
      </dependency>
      <dependency>
         <groupId>com.h2database</groupId>
         <artifactId>h2</artifactId>
         <version>1.4.197</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.glassfish.jaxb</groupId>
         <artifactId>jaxb-runtime</artifactId>
      </dependency>
      <dependency>
           <groupId>com.io7m.xom</groupId>
           <artifactId>xom</artifactId>
           <version>1.2.10</version>
       </dependency>
      <dependency>
          <groupId>commons-io</groupId>
          <artifactId>commons-io</artifactId>
          <version>2.6</version>
      </dependency>
      <dependency>
         <groupId>commons-net</groupId>
         <artifactId>commons-net</artifactId>
         <version>3.6</version>
      </dependency>
      <dependency>
        <groupId>com.univocity</groupId>
        <artifactId>univocity-parsers</artifactId>
        <version>2.5.9</version>
        <type>jar</type>
      </dependency>

   </dependencies>


   <build>
      <finalName>${prod.context.name}</finalName>

      <plugins>

         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <version>3.0.0-M2</version>
            <executions>
               <execution>
                  <id>enforce-maven</id>
                  <goals>
                     <goal>enforce</goal>
                  </goals>
                  <configuration>
                     <rules>
                        <requireMavenVersion>
                           <version>3.5</version>
                        </requireMavenVersion>
                     </rules>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <!-- Maven versions plugin to assist with managing versions of plugins, dependencies etc in this pom file.
                  mvn versions:display-plugin-updates
                  mvn versions:display-dependency-updates
           -->
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>versions-maven-plugin</artifactId>
            <version>2.7</version>
            <configuration>
               <generateBackupPoms>false</generateBackupPoms>
            </configuration>
         </plugin>

         <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <configuration>
               <profiles>
                  <profile>dev</profile> <!-- Set spring boot profile "dev" for spring-boot:run -->
               </profiles>
            </configuration>
         </plugin>

         <!-- Java compiler -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.0</version>
            <configuration>
               <release>${java.release}</release>
               <compilerArgs>
                  <arg>-parameters</arg>
               </compilerArgs>
            </configuration>
         </plugin>

         <!-- Generate client-side type definitions (Typescript) from web services dto classes (Java).
              https://github.com/vojtechhabarta/typescript-generator -->
         <plugin>
            <groupId>cz.habarta.typescript-generator</groupId>
            <artifactId>typescript-generator-maven-plugin</artifactId>
            <version>2.13.489</version>
            <executions>
               <execution>
                  <id>generate</id>
                  <goals>
                     <goal>generate</goal>
                  </goals>
                  <phase>process-classes</phase>
               </execution>
            </executions>
            <configuration>
               <jsonLibrary>jackson2</jsonLibrary>
               <classPatterns>
                  <classPattern>gov.fda.nctr.arlims.models.dto.**</classPattern>
               </classPatterns>
               <excludeClassPatterns>
                  <excludeClassPattern>**.*Exception</excludeClassPattern>
               </excludeClassPatterns>
               <customTypeMappings>
                  <mapping>java.time.LocalDate:string</mapping>
                  <mapping>java.time.Instant:string</mapping>
               </customTypeMappings>
               <outputKind>module</outputKind>
               <outputFileType>implementationFile</outputFileType>
               <outputFile>client/src/generated/dto.ts</outputFile>
            </configuration>
         </plugin>

         <!-- Write the client's environment file(s), to set the base href based on prod.context.name,
              for the client router configuration. -->
         <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <version>3.1.0</version>
            <executions>
               <execution>
                  <id>copy-resources</id>
                  <phase>prepare-package</phase>
                  <goals>
                     <goal>copy-resources</goal>
                  </goals>
                  <configuration>
                     <outputDirectory>${basedir}/client/src/environments</outputDirectory>
                     <resources>
                        <resource>
                           <directory>src/templates/environments</directory>
                           <filtering>true</filtering>
                        </resource>
                     </resources>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <!-- frontend build tools: https://github.com/eirslett/frontend-maven-plugin -->
         <plugin>
            <groupId>com.github.eirslett</groupId>
            <artifactId>frontend-maven-plugin</artifactId>
            <version>1.7.6</version>
            <configuration>
               <workingDirectory>client</workingDirectory>
               <installDirectory>.mvn-node</installDirectory>
            </configuration>
            <executions>
               <!-- Install node and npm for usage by maven. -->
               <execution>
                  <id>install node and npm locally for maven</id>
                  <goals><goal>install-node-and-npm</goal></goals>
                  <configuration>
                     <nodeVersion>${nodejs.version}</nodeVersion>
                  </configuration>
                  <phase>prepare-package</phase>
               </execution>
               <!-- Install modules for maven's local node/npm. -->
               <execution>
                  <id>npm install</id>
                  <goals><goal>npm</goal></goals>
                  <configuration>
                     <arguments>install --no-optional</arguments>
                  </configuration>
                  <phase>prepare-package</phase>
               </execution>
               <!-- Build the client. -->
               <execution>
                  <id>npm run build</id>
                  <goals><goal>npm</goal></goals>
                  <configuration>
                     <arguments>run build -- --base-href=/${prod.context.name}/</arguments>
                  </configuration>
                  <phase>prepare-package</phase>
               </execution>
               <!-- Copy client dist into target for inclusion in packaging. -->
               <execution>
                  <id>npm run copy-dist</id>
                  <goals><goal>npm</goal></goals>
                  <configuration>
                     <arguments>run copy-dist -- ${project.build.directory}/classes/public/</arguments>
                  </configuration>
                  <phase>prepare-package</phase>
               </execution>
            </executions>
         </plugin>

         <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <version>3.1.1</version>
            <configuration>
               <descriptors>
                  <descriptor>src/assembly/dist.xml</descriptor>
               </descriptors>
            </configuration>
            <executions>
               <execution>
                  <phase>package</phase>
                  <goals>
                     <goal>single</goal>
                  </goals>
               </execution>
            </executions>
         </plugin>

         <!--A "clean" should remove contents from the client's build directory also. -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-clean-plugin</artifactId>
            <version>3.1.0</version>
            <configuration>
               <filesets>
                  <fileset>
                     <directory>client/build</directory>
                     <includes>
                        <include>**</include>
                     </includes>
                     <followSymlinks>false</followSymlinks>
                  </fileset>
               </filesets>
            </configuration>
         </plugin>

         <!-- Create information about the source code revision into the build artifact. -->
         <plugin>
           <groupId>pl.project13.maven</groupId>
           <artifactId>git-commit-id-plugin</artifactId>
           <version>2.2.6</version>
           <executions>
             <execution>
               <id>get-git-info</id>
               <goals>
                 <goal>revision</goal>
               </goals>
             </execution>
           </executions>
           <configuration>
             <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
             <prefix>git</prefix>
             <verbose>false</verbose>
             <generateGitPropertiesFile>true</generateGitPropertiesFile>
             <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
             <format>json</format>
             <gitDescribe>
               <skip>false</skip>
               <always>false</always>
               <dirty>-dirty</dirty>
             </gitDescribe>
           </configuration>
         </plugin>

      </plugins>

   </build>

   <profiles>
      <profile>
         <id>specified-context-name</id>
         <activation>
            <property><name>CONTEXT_NAME</name></property>
         </activation>
         <properties>
            <prod.context.name>${CONTEXT_NAME}</prod.context.name>
         </properties>
      </profile>
      <profile>
         <id>oracle-jdbc</id>
         <dependencies>
            <!-- Oracle jdbc driver dependency from local Maven repo.
              Download Oracle jdcbc driver and install in local Maven repository:
                  mvn install:install-file -Dfile=ojdbc8.jar -Dpackaging=jar -DgroupId=com.oracle -DartifactId=ojdbc8 -Dversion=12.2.0.1
            -->
            <dependency>
               <groupId>com.oracle</groupId>
               <artifactId>ojdbc8</artifactId>
               <version>12.2.0.1</version>
               <type>jar</type>
            </dependency>
         </dependencies>
      </profile>
      <!-- Build a container image if on Linux. Jib (pure Java) plugin is avoided for now, because want
           guaranteed equivalence with command line tools, and image needs to be put in Podman local
           repository. -->
      <profile>
         <id>oci-image</id>
         <activation>
           <os>
             <family>unix</family>
             <name>Linux</name>
           </os>
         </activation>
         <build>
            <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
                <executions>
                  <execution>
                    <phase>package</phase>
                    <goals>
                       <goal>exec</goal>
                    </goals>
                    <configuration>
                      <executable>${project.basedir}/deployment/container/build-image.sh</executable>
                      <workingDirectory>${project.basedir}</workingDirectory>
                      <arguments>
                         <argument>${project.basedir}/target/alis.jar</argument>
                      </arguments>
                    </configuration>
                  </execution>
                </executions>
              </plugin>
              </plugins>
         </build>
      </profile>
   </profiles>

</project>
