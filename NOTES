Remove unneeded tables from dev db and publish to dev server.
  Make new application.properties for dev and test servers.

LABSDS API CHANGES NEEDED
=========================

Person inbox
------------
  - Needs
      product name (cfsanProductDesc)
      paf
      lid
      splitInd
      samplingOrg
  - registerCompletionDate has format inconsistent with other dates delivered by api ('9/30/13 12:00 AM')
    Please use actual date (not timestamp) or be consistent with lab api "dates" like:
       "scheduledCompletionDate": "2018-10-17 00:00:00.000-0400"
    - Field registerCompletionDate has format inconsistent with other dates delivered by api ('9/30/13 12:00 AM').
      Requesting to instead use actual date (preferably) or timestamp in ISO-like format consistent with lab api like:
        "scheduledCompletionDate": "2018-10-17 00:00:00.000-0400".
    - Field statusDate (really a timestamp) is being sent as unix epoch millis count ("1547477997000"), please change
      to a human-readable timestamp like "2019-01-12 14:45:02-0400".
  - It's unclear which sample number is needed among:
      analysisSample - looks like this is the one
      collectionSample - not present in api example data
      tdSampleNumber - example seems too long for a sample # (longer than 6 digits)
  - Need indicator of whether any other employees are assigned to the operation, or array of assigned
    employee person ids.  [If ui should continue to support showing assigned employees for a sample (op).]

Sample Metadata
---------------
  Need endpoint to fetch sample metadata for a given work id.
    WorkDetails takes work id but lacks:
      sample tracking num
      sample tracking sub num
      pac
      product name
    For the future maybe also add lid, paf etc.
    When available, review/modify implementation of getSampleOpDetails() in LabsDSFactsAccessService.

Microbiology Data Submission
----------------------------
  Doc needs to be updated that submission structure now expects an array at top level, and returns an array of results.
  Kit test submission
    Need example of spiking/kit test data submission, only example is result of GET request.
  BAM Findings
    How to determine pos/neg from identification text or codes? Recognize specific API/Vitek codes?  What if identifications are weak/uncertain?
      For each test unit with positive continuation tests, multiple identifications may have been made by media and selective agar.
      How to determine from these the single identification needed for the BAM submission for the test unit?
    Array element structure in analysisMicFindings:
      'subNumberCode': '1', // Original test unit num as in Vidas results? Or positives relative num? Really string not numeric?
      'genusCode': 'SLML',      // Why necessary again here?
      'speciesCode': 'SLML998', //
      'presenceResultIndicator': 'POS', // How to determine? Would a negative be reported (with an array entry) at all?
      'atypicalReactionCode': 'N',      // Where from?
      'isolatesSentNumber': 1,          // Where from?
      'fdaLabOrganizationId': 3004,     // Why not org name as elsewhere?
      'isolatesSentIndicator': 'Y',     // Where from?
      'remarksText': 'Remarks 1',       // Where from?
      'sampleAnalysisMicrobes': []      // What is this?
      ---
    Example from Leidos:
      "analysisMicFindings":[
         {
           "actionIndicator": "Y",
           "subNumberCode": "1",
           "genusCode": "SLML",
           "speciesCode": "SLML998",
           "presenceResultIndicator": "POS",
           "atypicalReactionCode": "Y",
           "isolatesSentNumber": 1,
           "fdaLabOrganizationId": 3004,
           "isolatesSentIndicator": "Y",
           "remarksText": "Findings Remarks",
           "atypicalReactionRemarksText": "Atypical Remarks Required as 'Y' in Atypical Biochem React Field",
           "secondaryPafCode": "SAL",
           "sampleAnalysisMicrobes": []
         }
      ]
      ---
      Fields in example which are not documented: genusCode, speciesCode, secondaryPafCode, sampleAnalysisMicrobes.
      Documented fields not in example: levelCountNumber, levelUnitCode, levelQualifierIndicator.

FACTS Status Update
-------------------
  Need api endpoint to which to post status updates.


TODO:
  Complete BAM submission work, mostly involving generation of finding structures from identifications data.
  Posting of lab accomplishment hours.
  Lookup of received-from information in prep stage.
  Status change (api endpoint still not available?)
  Implement proper per-stage validation and problem reporting.
  Stage completion sealing with signature.  Require admin override for further edits.
  Configure to run in Docker for cloud deployment, Java 11 + latest Spring framework.
  Implement proper reports according to Paul's package documentation.








Add impl for POST to status update ap in FactsController:
  /api/facts/sample-op/${opId}/status


Create accounts for Rick, Ash, Joseph, Wen, Paul.

Send email of priorities with estimated completion times to John next week sometime.
  multi-sample data entry
  FACTS writing
  overflow inbox

Prep stage
  Should access new api to list sample transfers from custodian, to let user pick a line, to set received-from person and timestamp.
  Sample received from/date should come from FACTS via Leidos api, as general metadata about the sample (maybe embed in sample op).
    Should be a drop down with lab group users (sample custodians) plus other choice.
    Should be displayed read-only in form at same place as current controls.
    John suggests adding Sample custodian as a group.
      Maybe rename ADMIN to LIMS_ADMIN.
      Also supervisor role.

Implement "lab inbox" management over the api directly.
  Then sample/assignment data is always current during management ops which is necessary anyway.


Spring Reverse Proxy Setup using Spring Cloud / Zuul
  https://spring.io/guides/tutorials/spring-security-and-angular-js/


JWT Invalidation
----------------
  Make user cache safe for concurrent use, maybe replace.
  Add a mechanism to tell the server to flush the user cache (in UserContextManager) for a given user or all users.
  Add disabled field to employee and AppUser.
  Have jwt recognizer check whether the user is disabled.


# Example api calls

GET http://localhost:8080/alis/api/user/context
Accept: application/json
Cache-Control: no-cache

###
POST http://localhost:8080/alis/api/auth/password
Accept: application/json
Cache-Control: no-cache
Content-Type: application/x-www-form-urlencoded

username=SCH1&password=123

###


Vidas Data Retrieval
--------------------
QR Codes
  https://davidshimjs.github.io/qrcodejs/
    Standalone, lightweight, not sure about QR code sizes supported.
  https://demos.shieldui.com/web/qrcode/basic-usage
    Depends on jquery and shieldui, supports all sizes of QR codes.
    http://demos.shieldui.com/web/qrcode/api
  Version 40 bar code with 1276 bytes of data:
    https://softwareengineering.stackexchange.com/questions/251062/how-many-bytes-can-i-fit-into-a-qr-code-with-low-notice-correction

Make a grid of QR codes for input text data.
  Try inline block layout for the qr codes.
  Divide data into fixed size chunks, encode each.


Schema/Entities
---------------

FACTS Data
----------
FACTS_WORK_REQUESTS
  RQST_DATE
  STATUS_CODE
  PRSN_ID
FACTS_WORK
  ASSGNR_PRSN_ID
  ESTMTD_START_DATE
  RQSTR_TRGT_CMPLTN_DATE
  STATUS_CODE
  SMPL_TRCKNG_NUM
  PRSN_ID
|
-< FACTS_WORK_PACS
     PAC_CODE

FACTS_SAMPLE_TRACKING_NUMBERS
  SMPL_TRCKNG_NUM
  PRSN_ID

FACTS_SAMPLES
  SMPL_TRCKNG_NUM

FACTS_SAMP_PROD_PACS
  SAMP_PROD_ID
  SMPL_TRCKNG_NUM (num) [not required]
  PAC_CODE (alpha) [not required]

FACTS_SAMPLE_ANALYSES
  SMPL_ANLYS_ID
  SMPL_TRCKNG_NUM
  SMPL_TRCKNG_SUB_NUM
  PAC_CODE

FACTS_AS_MICROBIOLOGY
  ANLYS_MIC_ID
  SMPL_ANLYS_ID
  PRBLM_CODE
  MTHD_CODE
  MTHD_SRC_CODE
  SUBS_EXMND_NUM
  SUBS_USED_CMPST_NUM
  CMPSTS_EXMND_NUM
  SUBS_DTCT_FND_NUM
|
-< FACTS_AS_MIC_LMT_SAMP_PREP
 |
 -< FACTS_AS_LMT_FINDS
 |
 -< FACTS_AS_LMT_ADD_PREP
|
-< FACTS_AS_MIC_FINDS
 |
 -< FACTS_AS_MIC_IDS
|
-< FACTS_AS_MIC_KIT_TESTS
|
-< FACTS_AS_MIC_PRSV_CATEGORIES
 |
 -< FACTS_AS_MIC_PRSV_PREPS
  |
  -< FACTS_AS_MIC_PRSV_FINDS
   |
   -< FACTS_AS_MIC_PRSV_OBSRVTNS


FACTS_ANALYSIS_GRP1
  ANLYS_GRP1_ID
  SMPL_ANLYS_ID
  MTHD_CODE
  INSTRMT_CODE
  SUBS_EXMND_NUM
  SUBS_PSTV_NUM
  TEST_KIT_RSLT_CODE
FACTS_ANALYSIS_GRP1_FINDINGS
  ANLYS_GRP1_FNDNG_ID
  SUB_NUM_CODE
  ANLYS_GRP1_ID
  AMT_FND_NUM
  AMT_UNIT_CODE
  SPIKE_MTRL_CODE
  SPIKE_LVL_NUM
  SPIKE_UNIT_CODE


Questions
---------
Are jars and bags disposable or to be entered into database for display in dropdown lists?

For John:
  Is subs per comp always num comps / num subs (each sub assigned into exactly one composite)?
    extracted_grams_per_sub, num_subs, num_comps, comp_grams, num_subs_per_comp
    Need to capture deviations via note? Or capture count of subs within each component?
  Is it necessary to carry around pack code with the sample id everywhere?
    I've designed this way, but want to check that this is really necessary.




Hardware
--------
  laptops
  batching barcode scanners.
    https://www.zebra.com/us/en/support-downloads/mobile-computers/handheld/mc9090-wm.html

Security
--------
SAML for single sign on?

App ID: 0757



API Doc
-------
Maybe generate api doc via https://www.vojtechruzicka.com/documenting-spring-boot-rest-api-swagger-springfox/


Leidos API Swagger Docs
  LabsDataService/swagger-ui.html


EPLC
----
Security doc required: System Security Plan (SSP), Risk Assessment, and Authorization to Operate (ATO)

Oracle 12.2 Availability:
  https://blogs.oracle.com/upgrade/oracle-database-12201-on-premises-is-now-available%2c-too

